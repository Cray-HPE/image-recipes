# This file contains a series of commands to perform (in order) in the kdump
# kernel after a kernel crash in the crash kernel(1st kernel) has happened.
#
# Directives in this file are only applicable to the kdump initramfs, and have
# no effect once the root filesystem is mounted and the normal init scripts are
# processed.
#
# Currently, only one dump target and path can be specified.  If the dumping to
# the configured target fails, the default action which can be configured via
# the "default" directive will be performed.
#
# Supported options:
#
# raw <partition>
#           - Will dd /proc/vmcore into <partition>.
#             Use persistent device names for partition devices,
#             such as /dev/vg/<devname>.
#
# nfs <nfs mount>
#           - Will mount nfs to <mnt>, and copy /proc/vmcore to
#             <mnt>/<path>/%HOST-%DATE/, supports DNS.
#
# ssh <user@server>
#           - Will scp /proc/vmcore to <user@server>:<path>/%HOST-%DATE/,
#             supports DNS.
#             NOTE: make sure the user has write permissions on the server.
#
# sshkey <path>
#           - Will use the sshkey to do ssh dump.
#             Specify the path of the ssh key to use when dumping
#             via ssh. The default value is /root/.ssh/kdump_id_rsa.
#
# <fs type> <partition>
#           - Will mount -t <fs type> <partition> <mnt>, and copy
#             /proc/vmcore to <mnt>/<path>/%DATE/.
#             NOTE: <partition> can be a device node, label or uuid.
#             It's recommended to use persistent device names
#             such as /dev/vg/<devname>.
#             Otherwise it's suggested to use label or uuid.
#
# path <path>
#           - "path" represents the file system path in which vmcore
#             will be saved.  If a dump target is specified in
#             kdump.conf, then "path" is relative to the specified
#             dump target.
#
#             Interpretation of "path" changes a bit if the user didn't
#             specify any dump target explicitly in kdump.conf.  In this
#             case, "path" represents the absolute path from root. The
#             dump target and adjusted path are arrived at automatically
#             depending on what's mounted in the current system.
#
#             Ignored for raw device dumps.  If unset, will use the default
#             "/var/crash".
#
# core_collector <command> <options>
#           - This allows you to specify the command to copy
#             the vmcore.  The default is makedumpfile, which on
#             some architectures can drastically reduce vmcore size.
#             See /sbin/makedumpfile --help for a list of options.
#             Note that the -i and -g options are not needed here,
#             as the initrd will automatically be populated with a
#             config file appropriate for the running kernel.
#             The default core_collector for raw/ssh dump is:
#             "makedumpfile -F -l --message-level 1 -d 31".
#             The default core_collector for other targets is:
#             "makedumpfile -l --message-level 1 -d 31".
#
#             "makedumpfile -F" will create a flattened vmcore.
#             You need to use "makedumpfile -R" to rearrange the dump data to
#             a normal dumpfile readable with analysis tools.  For example:
#             "makedumpfile -R vmcore < vmcore.flat".
#
#             For core_collector format details, you can refer to
#             kexec-kdump-howto.txt or kdump.conf manpage.
#
# kdump_post <binary | script>
#           - This directive allows you to run a executable binary
#             or script after the vmcore dump process terminates.
#             The exit status of the current dump process is fed to
#             the executable binary or script as its first argument.
#
# kdump_pre <binary | script>
#           - Works like the "kdump_post" directive, but instead of running
#             after the dump process, runs immediately before it.
#             Exit status of this binary is interpreted as follows:
#             0 - continue with dump process as usual
#             non 0 - reboot the system
#
# extra_bins <binaries | shell scripts>
#           - This directive allows you to specify additional binaries or
#             shell scripts to be included in the kdump initrd.
#             Generally they are useful in conjunction with a kdump_post
#             or kdump_pre binary or script which depends on these extra_bins.
#
# extra_modules <module(s)>
#           - This directive allows you to specify extra kernel modules
#             that you want to be loaded in the kdump initrd.
#             Multiple modules can be listed, separated by spaces, and any
#             dependent modules will automatically be included.
#
# default <reboot | halt | poweroff | shell | dump_to_rootfs>
#           - Action to perform in case dumping fails.
#             reboot:   Reboot the system.
#             halt:     Halt the system.
#             poweroff: Power down the system.
#             shell:    Drop to a bash shell.
#                       Exiting the shell reboots the system.
#             dump_to_rootfs:  Dump vmcore to rootfs from initramfs context and
#                       reboot. Useful when non-root dump target is specified.
#             The default option is "reboot".
#
# force_rebuild <0 | 1>
#           - By default, kdump initrd will only be rebuilt when necessary.
#             Specify 1 to force rebuilding kdump initrd every time when kdump
#             service starts.
#
# force_no_rebuild <0 | 1>
#           - By default, kdump initrd will be rebuilt when necessary.
#             Specify 1 to bypass rebuilding of kdump initrd.
#
#             force_no_rebuild and force_rebuild options are mutually
#             exclusive and they should not be set to 1 simultaneously.
#
# override_resettable <0 | 1>
#           - Usually an unresettable block device can't be a dump target.
#             Specifying 1 when you want to dump even though the block
#             target is unresettable
#             By default, it is 0, which will not try dumping destined to fail.
#
# dracut_args <arg(s)>
#           - Pass extra dracut options when rebuilding kdump initrd.
#
# fence_kdump_args <arg(s)>
#           - Command line arguments for fence_kdump_send (it can contain
#             all valid arguments except hosts to send notification to).
#
# fence_kdump_nodes <node(s)>
#           - List of cluster node(s) except localhost, separated by spaces,
#             to send fence_kdump notifications to.
#             (this option is mandatory to enable fence_kdump).
#

#raw /dev/vg/lv_kdump
#ext4 /dev/vg/lv_kdump
#ext4 LABEL=/boot
#ext4 UUID=03138356-5e61-4ab3-b58e-27507ac41937
#nfs my.server.com:/export/tmp
#ssh user@my.server.com
#sshkey /root/.ssh/kdump_id_rsa
path /var/crash
core_collector makedumpfile -l --message-level 1 -d 31
#core_collector scp
#kdump_post /var/crash/scripts/kdump-post.sh
kdump_pre /usr/sbin/ckdump-helper-script
#extra_bins /usr/bin/lftp
#extra_modules gfs2
#default shell
#force_rebuild 1
force_no_rebuild 1

# Notes on the dracut_args bit:
# - We add the no-hostonly parameters even though mkdumprd has the hostonly
#   parameters hard-coded in.  The ones we specify override the hard coded ones.
# - The --mount switch is a trick to get mkdumprd to not automatically try to
#   find a root filesystem to dump to.
# - The large chunks of --omit*'s are to slim the kdump initrd down enough to
#   allow us to dump with crashkernel=256M
dracut_args --no-hostonly --no-hostonly-cmdline --no-hostonly-i18n --force --add "nfs" --install "ckdump-helper ckdump-helper-script" --mount "none /dummy tmpfs" --omit "modsign btrfs crypt dm dmraid lvm mdraid multipath cifs fcoe fcoe-uefi iscsi uefi-lib" --omit-drivers "iosf_mbi arc4 acard-ahci ahci_platform ata_generic pata_acpi pata_ali pata_amd pata_arasan_cf pata_artop pata_atiixp pata_atp867x pata_cmd64x pata_cs5536 pata_hpt366 pata_hpt37x pata_hpt3x2n pata_hpt3x3 pata_it8213 pata_it821x pata_jmicron pata_marvell pata_netcell pata_ninja32 pata_oldpiix pata_pdc2027x pata_pdc202xx_old pata_piccolo pata_rdc pata_sch pata_serverworks pata_sil680 pata_sis pata_via pdc_adma sata_mv sata_nv sata_promise sata_qstor sata_sil24 sata_sil sata_sis sata_svw sata_sx4 sata_uli sata_via sata_vsc aoe brd floppy loop mtip32xx null_blk osdblk pktcdvd rbd sx8 virtio_blk xen-blkfront zram firewire-core firewire-ohci firewire-sbp2 hid-alps hid-appleir hid-aureal hid-axff hid-dr hid-elecom hid-gaff hid-gyration hid-holtekff hid-holtek-kbd hid-hyperv hid-icade hid-keytouch hid-kye hid-lcpower hid-lenovo-tpkbd hid-logitech-dj hid-multitouch hid-ortek hid-petalynx hid-picolcd hid-pl hid-primax hid-prodikeys hid-ps3remote hid-rmi hid-roccat-arvo hid-roccat-common hid-roccat-isku hid-roccat-kone hid-roccat-koneplus hid-roccat-konepure hid-roccat-kovaplus hid-roccat hid-roccat-lua hid-roccat-pyra hid-roccat-savu hid-saitek hid-samsung hid-sjoy hid-sony hid-speedlink hid-steelseries hid-sunplus hid-thingm hid-tivo hid-tmff hid-topseed hid-twinhan hid-uclogic hid-wacom hid-waltop hid-wiimote hid-zpff hid-zydacron i2c-hid uhid hv_vmbus i2c-algo-bit i2c-core ff-memless altera_ps2 arc_ps2 hyperv-keyboard serio_raw rc-core memstick mspro_block mptbase mptsas mptscsih mptspi rtsx_pci rtsx_usb cb710 tifm_core mmc_block mmc_core cb710-mmc rtsx_pci_sdmmc rtsx_usb_sdmmc sdhci-acpi sdhci sdhci-pci sdhci-pltfm tifm_sd ushc via-sdmmc vub300 mtd_blkdevs mtdblock mtd bonding ena amd8111e pcnet32 atlantic alx atl1c atl1e atl1 atl2 b44 bnx2 bnx2x bnxt_en cnic tg3 bna at91_ether macb xgmac liquidio liquidio_vf cxgb3 cxgb4 cxgb4vf libcxgb enic de2104x de4x5 dmfe tulip uli526x winbond-840 xircom_cb dnet be2net ethoc ipg e1000 e1000e fm10k i40evf igb igbvf ixgbevf jme mvmdio skge sky2 mlxsw_core mlxsw_i2c mlxsw_minimal mlxsw_pci mlxsw_spectrum mlxsw_switchib mlxsw_switchx2 myri10ge nfp pch_gbe netxen_nic qede qed qla3xxx qlcnic qlge 8139cp 8139too r8169 rocker sfc-falcon sfc epic100 smsc9420 tlan fjes geneve hv_netvsc macsec mii ntb_netdev amd at803x bcm87xx broadcom cicada davicom dp83640 et1011c icplus lxt marvell mdio-bitbang micrel national qsemi realtek smsc ste10Xp vitesse team team_mode_activebackup team_mode_broadcast team_mode_loadbalance team_mode_random team_mode_roundrobin tun asix ax88179_178a catc cdc_ether cdc_mbim cdc_ncm dm9601 int51x1 ipheth kaweth mcs7830 pegasus qmi_wwan r8152 rndis_host rtl8150 sierra_net smsc75xx smsc95xx usbnet virtio_net vmxnet3 vxlan hdlc_fr hdlc xen-netfront ntb ntb_transport libnvdimm nd_blk nd_btt nd_pmem nvme-core nvme-fabrics nvme-fc nvme nvme-loop nvmet-fc nvmet yenta_socket ptp_pch 3w-9xxx 3w-sas aacraid aic79xx arcmsr bfa bnx2fc csiostor fcoe libfcoe fnic hpsa hptiop hv_storvsc initio isci libfc libsas lpfc megaraid_sas mpt2sas mpt3sas mvsas mvumi pm80xx pmcraid qedf qla2xxx qla4xxx raid_class scsi_debug scsi_tgt scsi_transport_fc scsi_transport_sas scsi_transport_spi smartpqi stex ufshcd virtio_scsi vmw_pvscsi ssb tcm_loop uio cdc-wdm microtek uas ums-alauda ums-cypress ums-datafab ums-eneub6250 ums-freecom ums-isd200 ums-jumpshot ums-karma ums-onetouch ums-realtek ums-sddr09 ums-sddr55 ums-usbat usb-storage lcd fb_sys_fops syscopyarea sysfillrect sysimgblt virtio virtio_pci virtio_ring binfmt_misc btrfs cachefiles ceph cifs cramfs dlm ext4 fat msdos vfat cuse fuse gfs2 isofs jbd2 mbcache nfsd mac-celtic mac-centeuro mac-croatian mac-cyrillic mac-gaelic mac-greek mac-iceland mac-inuit mac-romanian mac-roman mac-turkish nls_cp1250 nls_cp1251 nls_cp1255 nls_cp737 nls_cp775 nls_cp850 nls_cp852 nls_cp855 nls_cp857 nls_cp860 nls_cp861 nls_cp862 nls_cp863 nls_cp864 nls_cp865 nls_cp866 nls_cp869 nls_cp874 nls_cp932 nls_cp936 nls_cp949 nls_cp950 nls_euc-jp nls_iso8859-13 nls_iso8859-14 nls_iso8859-15 nls_iso8859-1 nls_iso8859-2 nls_iso8859-3 nls_iso8859-4 nls_iso8859-5 nls_iso8859-6 nls_iso8859-7 nls_iso8859-9 nls_koi8-r nls_koi8-ru nls_koi8-u nls_utf8 overlay ramoops squashfs udf xfs crc-itu-t libcrc32c parman raid6_pq reed_solomon libceph udp_tunnel ip6_udp_tunnel psample snd snd-rawmidi snd-seq-device soundcore"
#fence_kdump_args -p 7410 -f auto -c 0 -i 10
#fence_kdump_nodes node1 node2
